/*
Deployment script for Database1.1

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "Database1.1"
:setvar DefaultFilePrefix "Database1.1"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL16.SQLEXPRESS\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL16.SQLEXPRESS\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
/*
The column [dbo].[RentalDetails].[RentalId] is being dropped, data loss could occur.

The column [dbo].[RentalDetails].[CustomerId] on table [dbo].[RentalDetails] must be added, but the column has no default value and does not allow NULL values. If the table contains data, the ALTER script will not work. To avoid this issue you must either: add a default value to the column, mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.
*/

IF EXISTS (select top 1 1 from [dbo].[RentalDetails])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
PRINT N'Dropping Foreign Key unnamed constraint on [dbo].[RentalDetails]...';


GO
ALTER TABLE [dbo].[RentalDetails] DROP CONSTRAINT [FK__RentalDet__Renta__3D5E1FD2];


GO
PRINT N'Dropping Foreign Key unnamed constraint on [dbo].[RentalDetails]...';


GO
ALTER TABLE [dbo].[RentalDetails] DROP CONSTRAINT [FK__RentalDet__Movie__3E52440B];


GO
PRINT N'Starting rebuilding table [dbo].[RentalDetails]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_RentalDetails] (
    [RentalDetailId] UNIQUEIDENTIFIER NOT NULL,
    [MovieId]        UNIQUEIDENTIFIER NOT NULL,
    [CustomerId]     UNIQUEIDENTIFIER NOT NULL,
    [RentalDate]     DATETIME         NULL,
    [ReturnDate]     DATETIME         NULL,
    [RentalPrice]    DECIMAL (5, 2)   NULL,
    PRIMARY KEY CLUSTERED ([RentalDetailId] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[RentalDetails])
    BEGIN
        INSERT INTO [dbo].[tmp_ms_xx_RentalDetails] ([RentalDetailId], [MovieId], [ReturnDate])
        SELECT   [RentalDetailId],
                 [MovieId],
                 [ReturnDate]
        FROM     [dbo].[RentalDetails]
        ORDER BY [RentalDetailId] ASC;
    END

DROP TABLE [dbo].[RentalDetails];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_RentalDetails]', N'RentalDetails';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Customers]...';


GO
ALTER TABLE [dbo].[Customers]
    ADD DEFAULT NEWID() FOR [CustomerId];


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[RentalDetails]...';


GO
ALTER TABLE [dbo].[RentalDetails] WITH NOCHECK
    ADD FOREIGN KEY ([MovieId]) REFERENCES [dbo].[Movies] ([MovieId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[RentalDetails]...';


GO
ALTER TABLE [dbo].[RentalDetails] WITH NOCHECK
    ADD FOREIGN KEY ([CustomerId]) REFERENCES [dbo].[Customers] ([CustomerId]) ON DELETE CASCADE;


GO
PRINT N'Creating Trigger [dbo].[Trigger1]...';


GO
-- Create a trigger that sets RentalPrice in RentalDetails based on MovieId
CREATE TRIGGER [Trigger1]
ON RentalDetails
AFTER INSERT
AS
BEGIN
    UPDATE rd
    SET rd.RentalPrice = m.RentalPrice
    FROM RentalDetails rd
    INNER JOIN inserted i ON rd.RentalDetailId = i.RentalDetailId
    INNER JOIN Movies m ON i.MovieId = m.MovieId;
END;
GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
CREATE TABLE [#__checkStatus] (
    id           INT            IDENTITY (1, 1) PRIMARY KEY CLUSTERED,
    [Schema]     NVARCHAR (256),
    [Table]      NVARCHAR (256),
    [Constraint] NVARCHAR (256)
);

SET NOCOUNT ON;

DECLARE tableconstraintnames CURSOR LOCAL FORWARD_ONLY
    FOR SELECT SCHEMA_NAME([schema_id]),
               OBJECT_NAME([parent_object_id]),
               [name],
               0
        FROM   [sys].[objects]
        WHERE  [parent_object_id] IN (OBJECT_ID(N'dbo.RentalDetails'))
               AND [type] IN (N'F', N'C')
                   AND [object_id] IN (SELECT [object_id]
                                       FROM   [sys].[check_constraints]
                                       WHERE  [is_not_trusted] <> 0
                                              AND [is_disabled] = 0
                                       UNION
                                       SELECT [object_id]
                                       FROM   [sys].[foreign_keys]
                                       WHERE  [is_not_trusted] <> 0
                                              AND [is_disabled] = 0);

DECLARE @schemaname AS NVARCHAR (256);

DECLARE @tablename AS NVARCHAR (256);

DECLARE @checkname AS NVARCHAR (256);

DECLARE @is_not_trusted AS INT;

DECLARE @statement AS NVARCHAR (1024);

BEGIN TRY
    OPEN tableconstraintnames;
    FETCH tableconstraintnames INTO @schemaname, @tablename, @checkname, @is_not_trusted;
    WHILE @@fetch_status = 0
        BEGIN
            PRINT N'Checking constraint: ' + @checkname + N' [' + @schemaname + N'].[' + @tablename + N']';
            SET @statement = N'ALTER TABLE [' + @schemaname + N'].[' + @tablename + N'] WITH ' + CASE @is_not_trusted WHEN 0 THEN N'CHECK' ELSE N'NOCHECK' END + N' CHECK CONSTRAINT [' + @checkname + N']';
            BEGIN TRY
                EXECUTE [sp_executesql] @statement;
            END TRY
            BEGIN CATCH
                INSERT  [#__checkStatus] ([Schema], [Table], [Constraint])
                VALUES                  (@schemaname, @tablename, @checkname);
            END CATCH
            FETCH tableconstraintnames INTO @schemaname, @tablename, @checkname, @is_not_trusted;
        END
END TRY
BEGIN CATCH
    PRINT ERROR_MESSAGE();
END CATCH

IF CURSOR_STATUS(N'LOCAL', N'tableconstraintnames') >= 0
    CLOSE tableconstraintnames;

IF CURSOR_STATUS(N'LOCAL', N'tableconstraintnames') = -1
    DEALLOCATE tableconstraintnames;

SELECT N'Constraint verification failed:' + [Schema] + N'.' + [Table] + N',' + [Constraint]
FROM   [#__checkStatus];

IF @@ROWCOUNT > 0
    BEGIN
        DROP TABLE [#__checkStatus];
        RAISERROR (N'An error occurred while verifying constraints', 16, 127);
    END

SET NOCOUNT OFF;

DROP TABLE [#__checkStatus];


GO
PRINT N'Update complete.';


GO
